
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "Biotech"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('Biotech')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CellVit")
> ### * CellVit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CellVit
> ### Title: Compute the cell vitality
> ### Aliases: CellVit
> 
> ### ** Examples
> 
> # we use a real dataset:
> us <- c(55, 65, 49, 57)
> st <- c(11, 12, 9, 6)
> 
> CellVit(unstained = us, stained = st)
[1] 83.33333 84.41558 84.48276 90.47619
> 
> 
> 
> 
> cleanEx()
> nameEx("Eadie_Hofstee")
> ### * Eadie_Hofstee
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Eadie_Hofstee
> ### Title: Draw an Eadie-Hofstee graph (and compute the y-axis intercept)
> ### Aliases: Eadie_Hofstee
> 
> ### ** Examples
> 
> # simulate values
> sub <-seq(1,20,1)
> vel <-((runif(1,14.7,15)*sub)/(runif(1,2.5,3)+sub))+rnorm(20,0,.3)
> # plot them
> Eadie_Hofstee(vel = vel, sub = sub)
$EHPlot
`geom_smooth()` using formula 'y ~ x'

$EHmodel

Call:
stats::lm(formula = vel/sub ~ vel)

Coefficients:
(Intercept)          vel  
     5.4552      -0.3643  


[[3]]

Call:
stats::lm(formula = vel/sub ~ vel)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.34349 -0.06554  0.04054  0.06769  0.31899 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  5.45522    0.15289   35.68  < 2e-16 ***
vel         -0.36434    0.01366  -26.67 6.36e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.1479 on 18 degrees of freedom
Multiple R-squared:  0.9753,	Adjusted R-squared:  0.974 
F-statistic: 711.5 on 1 and 18 DF,  p-value: 6.362e-16


> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("MultiRate")
> ### * MultiRate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MultiRate
> ### Title: Compute the cell vitality after frosting
> ### Aliases: MultiRate
> 
> ### ** Examples
> 
> # original data is going to be applied
> ud  <- c(12, 22, 15, 17)
> u24 <-  c(9, 3, 5, 4)
> 
> MultiRate(unstained_defro =ud, unstained_24h = u24)
[1] 75.00000 13.63636 33.33333 23.52941
> 
> 
> 
> 
> cleanEx()
> nameEx("VDi")
> ### * VDi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VDi
> ### Title: Compute the dispersion volume mind the units
> ### Aliases: VDi
> 
> ### ** Examples
> 
> VDi(Ai = 0.45, HDi = 1.33)
[1] 0.5985
> 
> 
> 
> cleanEx()
> nameEx("c.any")
> ### * c.any
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c.any
> ### Title: Compute the concentration of the source salts for specific
> ###   elements inside a fermentationbroth
> ### Aliases: c.any
> 
> ### ** Examples
> 
> 
> # c.any(ds = 50, ele = 'P', org = 'Fungus')
> # c.any(ds = 50, ele = "N", org = 'Fungus')
> 
> 
> 
> cleanEx()
> nameEx("dilfact")
> ### * dilfact
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dilfact
> ### Title: Computing a dilution factor, a sample volume (Vorlagevolumen),
> ###   concentration after dilution Compute the dilution factor
> ### Aliases: dilfact
> 
> ### ** Examples
> 
> dilfact(1, 100)
[1] 0.01
> 
> 
> 
> cleanEx()
> nameEx("eG")
> ### * eG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eG
> ### Title: Compute gas content Keep an eye on the units
> ### Aliases: eG
> 
> ### ** Examples
> 
> eG( VG = c(1, 2, 3), VL = c(6, 12, 24) )
[1] 0.1428571 0.1428571 0.1111111
> 
> 
> 
> cleanEx()
> nameEx("velG.cal")
> ### * velG.cal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: velG.cal
> ### Title: compute the actual gas flow (eliminate the error of the
> ###   rotameter) of either the big airlift reactor or the smaller one used
> ###   at the Biotechnikum at Forum Seestra<c3><9f>e
> ### Aliases: velG.cal
> 
> ### ** Examples
> 
> velG.cal( velG.mes = 1, p.mes = 1.024, t.mes = 299.9, reactor = "small" )
[1] 0.07912657
> 
> 
> 
> cleanEx()
> nameEx("vitality")
> ### * vitality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vitality
> ### Title: Vitality of a cell population
> ### Aliases: vitality
> 
> ### ** Examples
> 
> vitality(stained = 3, unstained = 77)
[1] 2566.667
> 
> 
> 
> cleanEx()
> nameEx("vitrate")
> ### * vitrate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vitrate
> ### Title: Vitality rate of a cell population
> ### Aliases: vitrate
> 
> ### ** Examples
> 
> vitrate(unstained_prefro = 33, unstained_defro = 12)
[1] 36.36364
> 
> 
> 
> cleanEx()
> nameEx("yield")
> ### * yield
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: yield
> ### Title: Compute yield count
> ### Aliases: yield
> 
> ### ** Examples
> 
> # original data is going to be applied
> uP  <- c(88, 73, 72, 97)
> u24 <-  c(9, 3, 5, 4)
> yield(unstained_prefro = uP, unstained_24h = u24)
[1] 10.227273  4.109589  6.944444  4.123711
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.742 0.129 1.891 0.003 0.003 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
