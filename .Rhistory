x.neu <- x %>%
matrix(, ncol = 2) %>%
gplot()
x.neu <- x %>%
matrix(, ncol = 2) %>%
qplot()
x.neu
x.neu <- x %>%
matrix(, ncol = 2) %>%
qplot()
x.neu
x.neu <- x %>%
matrix(, ncol = 2) %>%
plot()
x.neu
x %>%
matrix(, ncol = 2) %>%
plot()
library(pander)
library(magrittr)
library(tidyverse)
tibble(
"Messung 1" = c("Wert 1", "Wert 2", "Wert 3", "Wert 4"),
"Messung 2" = c("Wert 1", "Wert 2", "Wert 3", "Wert 4"),
"Messung n" = c("Wert 1", "Wert 2", "Wert 3", "Wert 4")
) %>%
pander()
Messdaten <- tibble(
"Messung 1" = c("Wert 1", "Wert 2", "Wert 3", "Wert 4"),
"Messung 2" = c("Wert 1", "Wert 2", "Wert 3", "Wert 4"),
"Messung n" = c("Wert 1", "Wert 2", "Wert 3", "Wert 4")
)
Datensatz <- list(
temp.  <- c("Temperatur 1", "Temperatur 2", "Temperatur 3", "Temperatur 4"),
Messdaten,
"Viskosität"  <- c("Viskosität 1", "Viskosität 2", "Viskosität 3", "Viskosität 4")
)
pander(Datensatz)
library(readxl)
# Die orginale Tabelle direkt in R importiert:
read_excel("ProgesteronVK.xlsx")
# aus der vorangegangenen Tabelle wurde nach Umformung in
# Excel diese Liste generiert
Messwerte <- list(
"Diese Liste enthält die Messwerte der ursprünglichen Tabelle, nur sauberer für R",
Progesteron.Standard <- read_excel("Progesteron.xlsx", sheet = 2),
Progesteron.Proben.1 <- read_excel("Progesteron.xlsx", sheet = 3),
Progesteron.Proben.2 <- read_excel("Progesteron.xlsx", sheet = 4)
)
pander(Messwerte)
csv <- read.csv2(
file = "Messdaten.csv"    # Dateipfad
, sep = ";"               # Separator-Typ
, dec = ","               # Dezimaltrenner
, header = T,             # Überschriften werden konserviert
na.strings = "NA"         # NA bedeutet NA
)
library(readxl)                     # laden des benötigten Pakets
xlsx <- read_excel(
path = "Messdaten.xlsx", # Dateipfad
sheet = 1,               # Sheet-Nummer
skip = 1 ,               # skippen der ersten Zeile (Namen)
na = "NA"                # NA bedeutet NA
)
xlsx == csv # die beiden Formate enthalten die selben Informationen, stimmt das?
summary(Messdaten)
summarize(Messdaten)
summary(Messwerte)
summary(Messwerte[[2]])
library(ggplot2)
library(readr)
library(readr)
Messdaten <- read_delim("Messdaten.csv",
";", escape_double = FALSE, locale = locale(decimal_mark = ",",
asciify = TRUE), trim_ws = TRUE)
pander::pander(Messdaten)
qplot(data = Messdaten, # Woher kommen die Daten
x = `t = min`,    # Was kommt auf die x-Achse
y = `Gr. 3`,      # Was kommt auf due y-Achse
geom = c("smooth", "point"))    # Welches geom
MD_Plot <- function(Messdaten, x = 't = min', y) {
qplot(data = Messdaten, # Woher kommen die Daten
x = `t = min`,    # Was kommt auf die x-Achse
y = y,      # Was kommt auf due y-Achse
geom = c("smooth", "point"))
}
MD_Plot(Messdaten, y = Messdaten$`Gr. 4`)
MD_Plot(Messdaten, y = Messdaten$`Gr. 5`)
x %>%
matrix(, ncol = 2) %>%
plot() %>%
str()
x %>%
matrix(, ncol = 2) %>%
plot() %>%
str()
x.neu
c(1:22)
matrix(, ncol = 2) %>%
plot() %>%
str()
c(1:22) %>%
matrix(, ncol = 2) %>%
plot() %>%
str()
c(1:22) %>%
matrix(, ncol = 2) %>%
plot() %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
summary() %>%
plot() %>%
x.neu
c(1:22) %>%
matrix(, ncol = 2) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
tibble(, ncol = 2) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
tibble(, ncol = 2) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., cumsum())
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., cumsum())
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., cumsum()) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., cumsum()) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., mean() ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., mean(.) ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., col.mean(.) ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., col_mean(.) ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., colmean(.) ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., colMeans(.) ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(., colMeans() ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate((.), colMeans() ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(, colMeans() ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
mutate(colMeans() ) %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
colMeans() %>%
mutate() %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
colMeans() %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
mutate((.), colMeans() ) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
mutate((.), colMeans() ) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
mutate(, colMeans() ) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
colMeans() %>%
summary()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
colMeans() %>%
boxplot()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(-1::) %>%
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(::1) %>%
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(1::) %>%
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
sort() %>%
colMeans() %>%
boxplot()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
sort() %>%
colMeans() %>%
boxplot()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
colMeans() %>%
boxplot()
rnorm(100) %>%
matrix(, ncol = 2) %>%
tibble() %>%
colMeans() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 2) %>%
tibble() %>%
colMeans() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 1) %>%
tibble() %>%
colMeans() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
tibble() %>%
colMeans() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
colMeans() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 2) %>%
tibble() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 5) %>%
tibble() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 5) %>%
tibble() %>%
df() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 5) %>%
tibble() %>%
df() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 5) %>%
tibble() %>%
df(.) %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 5) %>%
tibble() %>%
as.data.frame() %>%
boxplot()
rnorm(100, mean = 20, sd = 10) %>%
matrix(, ncol = 5) %>%
tibble() %>%
as.data.frame() %>%
summarise()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(2:4) %>%
colMeans() %>%
plot()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(1:8) %>%
colMeans() %>%
plot()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(1:8) %>%
colMeans() %>%
print()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(1:8) %>%
rowMeans() %>%
print()
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(1:8) %>%
rowMeans() %>%
print() %>%
boxplot()
# Wir erstellen einen Vektor mit Werten von
c(1:22) %>%
matrix(, ncol = 2) %>%
tibble() %>%
slice(1:8) %>%
rowMeans() %>%
print() %>%
boxplot()
# Wir erstellen einen Vektor mit Werten von 1 bis 22
c(1:22) %>%
# Dieser Vektor wird eine Matrix mit zwei Spalten
matrix(, ncol = 2) %>%
# Die Matrix wird in einen Tibble gewandelt
tibble() %>%
# Dieser Tibble wird auf die Zeilen 1 bis 8 gekürzt
slice(1:8) %>%
# Die Zeilen-Mittel werden errechnet
rowMeans() %>%
# Die Zeilen-Mittel werden ausgegebn
print() %>%
# Die Zeilenmittel werden in einem Boxplot dargestellt
boxplot()
# Wir erstellen einen Vektor mit Werten von 1 bis 22
%>%
# Wir erstellen einen Vektor mit Werten von 1 bis 22
%>%
# Dieser Tibble wird auf die Zeilen 1 bis 8 gekürzt
slice(tibble(matrix(c(1:22), ncol = 2),1:8)) %>%
# Die Zeilen-Mittel werden errechnet
rowMeans() %>%
# Die Zeilen-Mittel werden ausgegebn
print() %>%
# Die Zeilenmittel werden in einem Boxplot dargestellt
boxplot()
# Dieser Tibble wird auf die Zeilen 1 bis 8 gekürzt
slice(tibble(matrix(c(1:22), ncol = 2),1:8)) %>%
# Die Zeilen-Mittel werden errechnet
rowMeans() %>%
# Die Zeilen-Mittel werden ausgegebn
print() %>%
# Die Zeilenmittel werden in einem Boxplot dargestellt
boxplot()
boxplot(print( rowMeans(slice(tibble(matrix(c(1:22), ncol = 2),1:8)))))
boxplot(print( rowMeans( slice( tibble( matrix( c(1:22) , ncol = 2)),1:8))))
boxplot(
print(
rowMeans(
slice(
tibble(
matrix(
c(1:22),
ncol = 2)
)
,1:8)
)
)
)
knit_with_parameters('~/Bachelor/vignette/Daten_bearbeiten/Daten_bearbeiten.Rmd')
knit_with_parameters('~/Bachelor/vignette/Daten_bearbeiten/Daten_bearbeiten.Rmd')
install.packages("bookdown")
lvtemporary_427616 <- read.csv2("~/Bachelor/Beispielauswertungen/kLa/lvtemporary_427616.csv", row.names=1)
View(lvtemporary_427616)
library(devtools)
library(devtools)
library(devtools)
library(devtools)
library(devtools)
library(devtools)
load_all("../../Biotech")
library(readr)
# Laden der Rohdaten
rawdata <- read.csv2("~/Bachelor/Beispielauswertungen/kLa/lvtemporary_427616.csv")
# Motorleistung PM
PM <- function (P.perc, rpm, F1 = .107, F2 = .062, FC = .753) {
PM <- (F1 * rpm) * (F2 * P.perc)
PM <- PM * FC
return(PM)
}
# Motorleistung in Prozent
percent <- c( 20.3, 22.5, 24.9, 27 )
# rpm
rpm <- c( 1250, 1358, 1467, 1500 )
# Berechnung der eingetragenen Leistung
PM.mes <- PM( P.perc = percent, rpm = rpm )
time.mes <- c(1.85,1.89,1.93,1.97)
mes.dat <- rawdata %>%
filter(,  time.mes)
mes.dat <- rawdata %>%
filter(, rawdata$Zeit..h....pO2.... time.mes)
mes.dat <- rawdata %>%
filter(, rawdata$Zeit..h....pO2.... == time.mes)
mes.dat <- rawdata %>%
filter(, rawdata$Zeit..h....pO2.... %in% time.mes)
mes.dat <- rawdata %>%
filter(, rawdata$"Zeit..h....pO2...." %in% time.mes)
library(readxl)
lvtemporary_427616 <- read_excel("~/Bachelor/Beispielauswertungen/kLa/lvtemporary_427616.xlsx",
skip = 1)
View(lvtemporary_427616)
# Laden der Rohdaten
rawdata <- read_excel("~/Bachelor/Beispielauswertungen/kLa/lvtemporary_427616.xlsx",  skip = 1)
library(readxl)
# Laden der Rohdaten
rawdata <- read_excel("~/Bachelor/Beispielauswertungen/kLa/lvtemporary_427616.xlsx",  skip = 1)
# Motorleistung PM
PM <- function (P.perc, rpm, F1 = .107, F2 = .062, FC = .753) {
PM <- (F1 * rpm) * (F2 * P.perc)
PM <- PM * FC
return(PM)
}
# Motorleistung in Prozent
percent <- c( 20.3, 22.5, 24.9, 27 )
# rpm
rpm <- c( 1250, 1358, 1467, 1500 )
# Berechnung der eingetragenen Leistung
PM.mes <- PM( P.perc = percent, rpm = rpm )
time.mes <- c(1.85,1.89,1.93,1.97)
mes.dat <- rawdata %>%
filter(, rawdata$"Zeit..h....pO2...." %in% time.mes)
mes.dat <- rawdata %>%
filter(, rawdata$`Zeit (h) - pH [-] x 10` %in% time.mes)
mes.dat <- rawdata %>%
filter(, rawdata$`Zeit (h) - pH [-] x 10`  == time.mes)
mes.dat <- rawdata %>%
filter( . , rawdata$`Zeit (h) - pH [-] x 10`  == time.mes)
library(data.table)
packages <- readRDS("~/Bachelor/Biotech/packages.rds")
setwd("../../Biotech/")
library(devtools)
load_all()
setwd("../../Biotech")
