frofrom scipy import stats
frofrom scipy import stats
fro scipy import stats
from scipy import stats
pip install scipy
import numpy as np
from scipy import stats
from scipy import stats
from scipy import stats
library(devtools)
load_all()
install.packages(c("backports", "ellipsis", "glue", "maptools", "spatstat"))
12 %% 7
x = 20
Linsen = 100
while( x != Linsen ){
print("Esst mehr Linsen")
x = x + 20
print(x)
}
x = 20
Linsen = 100
while( x != Linsen ){
print("Esst mehr Linsen")
x = x + 1
print(x)
}
x = 20
Linsen = 100
while( x != Linsen ){
print("Esst mehr Linsen")
x = x + 12
print(x)
}
install.packages("Hmisc")
install.packages("foreign")
pwd()
getwd()
setwd("~/Bachelor/Paket_BHT/Biotech")
# laden der benötigten Pakete
library(readxl)
# Laden des Datesatz
Spektrum <- read_xlsx("Absoprtionspektrum210-600nm.xlsx")
# Laden des Datesatz
Spektrum <- read_xlsx("../Beispielauswertungen/Absorptionsspektren/Spektren_ohne_Schönheit/Absoprtionspektrum210-600nm.xlsx")
# Ein einfacher plot:
plot(Spektrum$`Probe 1` ~ Spektrum$nm, type = "l")
# wir können erkennen, dass auf dem Spektrum gerade am Anfang
# Fehlermessungen auftreten, diese werden entfernt:
library(tidyverse)
Spektrum <- slice(Spektrum, 20:391)
# noch man plotten, dieses mal mit ggplot:
ggplot()+
geom_line(aes(y = Spektrum$`Probe 1` , x = Spektrum$nm))+
xlab("Wellenlänge in nm")+
ylab("Absorption")+
theme_minimal()
# nun wollen wir mal sehen ob wir auch zwei oder mehr Spektren in einen Plot bekommen
library(readr)
Spektren <- read.csv2("~/Bachelor/Paket_BHT/Beispielauswertungen/Absorptionsspektren/absspkrt.csv")
devtools::use_data()
save(Spektrum, "Spektrum1")
save(Spektrum, file = "Spektrum1")
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages(c("ape", "backports", "car", "carData", "dbplyr", "dplyr", "DT", "ggplot2", "haven", "htmlTable", "htmltools", "httpuv", "isoband", "knitr", "later", "lubridate", "mvtnorm", "nlme", "pkgload", "promises", "reticulate", "rmarkdown", "rversions", "shiny", "sp", "survival", "tinytex", "vctrs", "xfun"))
install.packages("devtools")
use_data()
save(Spektrum, file = "data/AbsSpkt1.Rda")
# nun wollen wir mal sehen ob wir auch zwei oder mehr Spektren in einen Plot bekommen
library(readr)
Spektren <- read.csv2("~/Bachelor/Paket_BHT/Beispielauswertungen/Absorptionsspektren/absspkrt.csv")
Spektren <- read.csv2("../Beispielauswertungen/Absorptionsspektren/Spektren_ohne_Schönheit/absspkrt.csv")
#wollen wir mal sehen, wie die Daten strukturiert sind
str(Spektren)
length(Spektren$`Wavelength (nm)`)
Spektren <- tibble(
nm = Spektren[2:111,]$Wavelength..nm. ,
Abs.1 = Spektren[2:111,]$Abs,
Abs.2 = Spektren[2:111,]$Abs.1
)
# laden der benötigten Pakete
library(readxl)
# Laden des Datesatz
Spektrum <- read_xlsx("../Beispielauswertungen/Absorptionsspektren/Spektren_ohne_Schönheit/Absoprtionspektrum210-600nm.xlsx")
save(Spektrum, file = "data/AbsSpkt1.Rda")
# Ein einfacher plot:
plot(Spektrum$`Probe 1` ~ Spektrum$nm, type = "l")
# wir können erkennen, dass auf dem Spektrum gerade am Anfang
# Fehlermessungen auftreten, diese werden entfernt:
library(tidyverse)
Spektrum <- slice(Spektrum, 20:391)
save(Spektrum, file = "Spektrum1")
# noch man plotten, dieses mal mit ggplot:
ggplot()+
geom_line(aes(y = Spektrum$`Probe 1` , x = Spektrum$nm))+
xlab("Wellenlänge in nm")+
ylab("Absorption")+
theme_minimal()
# nun wollen wir mal sehen ob wir auch zwei oder mehr Spektren in einen Plot bekommen
library(readr)
Spektren <- read.csv2("../Beispielauswertungen/Absorptionsspektren/Spektren_ohne_Schönheit/absspkrt.csv")
#wollen wir mal sehen, wie die Daten strukturiert sind
str(Spektren)
length(Spektren$`Wavelength (nm)`)
Spektren <- tibble(
nm = Spektren[2:111,]$Wavelength..nm. ,
Abs.1 = Spektren[2:111,]$Abs,
Abs.2 = Spektren[2:111,]$Abs.1
)
save(Spektren, file = "data/AbsSpkt2.Rda")
devtools::check()
library(devtools)
check()
load_all()
#'
#' @param plate the plate to be visualised as dataframe
#'
#' @return a neat looking plot with the absorption intensity as color-gradient
#' @export
#'
#' @examples
#'
#' \dontrun{concVis96.trimmed(HSA1)}
#'
concVis96.trimmed <-
function(plate) {
daten <- plate[,2:13] %>%
as.matrix() %>%
as.vector()
y  <- paste0(seq(1,12))
x <- LETTERS[1:8]
grid.1 <- expand.grid(X = x, Y = y)
grid.1$Abs <- daten
vis96 <- ggplot2::ggplot( data = grid.1, mapping = ggplot2::aes( X, Y, fill = Abs ) )+
ggplot2::geom_tile()
return(vis96)
}
#' Visualisation of a 96-Wellplate (concentration) without triming of any cols or rows
#'
#' this method uses a dataframe of 8x12 values to show the measured value of each well as a colorgradient
#' @param plate the plate to be visualised as dataframe
#'
#' @return a neat looking plot with the absorption intensity as color-gradient
' @return a neat looking matrix with the concentration as color-gradient
#' @export
check()
load_all()
AbsSpkt2
view(AbsSpkt2)
