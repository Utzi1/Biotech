library(devtool)
library(devtools)
load_all()
check
check()
document()
l
check()
check()
installed.packages()
library(devtools)
install_github()
cite(dr4pl)
library(dr4pl)
cite(dr4pl())
cite(dr4pl)
cite(bib = "dr4pl")
cite(bib = dr4pl)
cite(ggplot)
citation("dplyr")
citation("devtools")
citation("readxl")
citation("drc")
library(OutlierDetection)
citation("OutlierDetection")
library(outliers)
citation("outliers")
upper.tri(liste)
liste <- list(1:4, c(a, b, c), 5:10)
liste <- list(1:4, c("a", "b", "c"), 5:10)
upper.tri(liste)
outer(liste)
out[i] <- length(liste[i])
for(i in 2:length(liste)){
out[i] <- length(liste[i])
}
github_pull(https://github.com/emanuele-guidotti/COVID19.git)
install_github(https://github.com/emanuele-guidotti/COVID19.git)
install_github("https://github.com/emanuele-guidotti/COVID19.git")
COVID19::world()
library(COVID19)
world(date = Sys.Date())
library(COVID19)
world(date = Sys.Date())
world(date = Sys.Date()-2)
world(date = Sys.Date()-1)
Weltweit <- world(date = Sys.Date()-1)
Weltweit <- world(date = Sys.Date()-1)
View(Weltweit)
View(Weltweit)
Filter(Weltweit, Country_Region == "Germany")
filter(Weltweit, Country_Region == "Germany")
View(Weltweit)
filter(Weltweit, Weltweit$Combined_Key == "Germany")
Weltweit <- world(date = Sys.Date()-1)
filter(Weltweit, Weltweit$Combined_Key == "Germany")
Weltweit <- world(date = Sys.Date())
Weltweit <- world(date = Sys.Date()-2)
filter(Weltweit, Weltweit$Combined_Key == "Germany")
Weltweit <- world(date = Sys.Date()-1)
DE <- filter(Weltweit, Weltweit$Combined_Key == "Germany")
boxplot(DE)
hist(DE)
plot(DE)
str(DE)
DE <- filter(Weltweit, Weltweit$Country_Region == "Germany")
str(DE)
OutlierDetection(DE)
install.packages("fitdistrplus")
library(fitdistrplus)
data(groundbeef)
serving <- groundbeef$serving
fitg <- fitdist(serving, "gamma")
summary(fitg)
plot(fitg)
plot(fitg, demp = TRUE)
plot(fitg, histo = FALSE, demp = TRUE)
cdfcomp(fitg, addlegend=FALSE)
data(groundbeef)
serving <- groundbeef$serving
fitg <- fitdist(serving, "gamma")
summary(fitg)
plot(fitg)
plot(fitg, demp = TRUE)
plot(fitg)
plot(fitg, histo = FALSE, demp = TRUE)
cdfcomp(fitg, addlegend=FALSE)
denscomp(fitg, addlegend=FALSE)
ppcomp(fitg, addlegend=FALSE)
qqcomp(fitg, addlegend=FALSE)
library(ggplot2)
fitW <- fitdist(serving, "weibull")
fitln <- fitdist(serving, "lnorm")
fitg <- fitdist(serving, "gamma")
dcomp <- denscomp(list(fitW, fitln, fitg), legendtext = c("Weibull", "lognormal", "gamma"),
xlab = "serving sizes (g)", xlim = c(0, 250),
fitcol = c("red", "green", "orange"), fitlty = 1,
xlegend = "topright", plotstyle = "ggplot", addlegend = FALSE)
dcomp + ggplot2::theme_minimal() + ggplot2::ggtitle("Ground beef fits")
data(danishuni)
# (2) plot and description of data
#
plotdist(danishuni$Loss)
# (3) load of data
#
data(danishmulti)
# (4) plot and description of data
#
idx <- sample(1:NROW(danishmulti), 10) barplot(danishmulti$Building[idx], col = "grey25",
ylim = c(0, max(danishmulti$Total[idx])), main = "Some claims of danish data set")
barplot(danishmulti$Content[idx], add = TRUE, col = "grey50", axes = FALSE)
barplot(danishmulti$Profits[idx], add = TRUE, col = "grey75", axes = FALSE)
legend("topleft", legend = c("Building", "Content", "Profits"),
fill = c("grey25", "grey50", "grey75"))
# (4) plot and description of data
#
idx <- sample(1:NROW(danishmulti), 10)                                           ylim = c(0, max(danishmulti$Total[idx])), main = "Some claims of danish data set")
library(gapminder)
library("gapmidner")
install.packages("gapminder")
library("gapminder")
gapminder
plot(gapminder)
qplot(gapminder)
library(tidyverse)
qplot(gapminder)
boxplot(gapminder)
p <- ggplot(data = ggamma())
p <- ggplot(data = gapminder)
ggplot(data = gapminder, mapping = aes(gapminder$gdpPercap, gapminder$lifeExp))
ggplot(data = gapminder, mapping = aes(gapminder$gdpPercap, gapminder$lifeExp))+
geom_point()
ggplot(data = gapminder, mapping = aes(gapminder$gdpPercap, gapminder$lifeExp))+
geom_point()+
geom_smooth()
ggplot(data = gapminder, mapping = aes(gapminder$gdpPercap, gapminder$lifeExp))+
geom_point()+
geom_smooth()+
scale_x_log10()
ggplot(data = gapminder, mapping = aes(gapminder$gdpPercap, gapminder$lifeExp), color = continent)+
geom_point()+
geom_smooth()+
scale_x_log10()
ggplot(data = gapminder, mapping = aes(gapminder$gdpPercap, gapminder$lifeExp), color = continent)+
geom_point()+
geom_smooth()+
scale_x_log10()+
legend(col = gapminder$gdpPercap)
# laden der benötigten Pakete
library(readxl)
# Laden des Datesatz
Spektrum <- read_xlsx("Absoprtionspektrum210-600nm.xlsx")
# Ein einfacher plot:
plot(Spektrum$`Probe 1` ~ Spektrum$nm, type = "l")
# wir können erkennen, dass auf dem Spektrum gerade am Anfang
# Fehlermessungen auftreten, diese werden entfernt:
library(tidyverse)
Spektrum <- slice(Spektrum, 20:391)
# Laden der Standardreih# Die Werte, welche als Grundlage für die Standardreihe verwendet werden wurden
# hierbei noch verändert, es wird angenommen, dass die Spalte MW Werte auslässt,
# welche den Mittelwert zu stark verfälschene
library(readxl)
STR1 <- read_excel("~/Bachelor/Paket_BHT/Beispielauswertungen/progesteron_Assay/STR1.xlsx")
str(STR1)
# Laden von Biotech
library(devtools)
load_all("../../Biotech")
#
library(tidyverse)
# Errechnen der Mittelwerte
STR1 <- mutate(STR1, Std = (STR1$E1 + STR1$E2 + STR1$E3)/3)
# Vergleich der Mittelwerte aus den Standards und den von der Gruppe errechneten Werten:
tibble(
STR1$MW == STR1$Std,
STR1$MW,
STR1$Std
)
# Die Werte, welche als Grundlage für die Standardreihe verwendet werden wurden
# hierbei noch verändert, es wird angenommen, dass die Spalte MW Werte auslässt,
# welche den Mittelwert zu stark verfälschen
dose_response_plot(STR1$conc,STR1$Std)
dose_response_plot(STR1$conc,STR1$MW)
# Das nicht-lineare Modell:
library(dr4pl)
fit <-  dr4pl(STR1$conc[1:8]~STR1$MW[1:8])
conc.eval.DR <- function (abs.P) {
fit$parameters[1] + ((fit$parameters[4] - fit$parameters[1])/(1 + (abs.P/fit$parameters[2])^fit$parameters[3]))
}
conc.eval.DR(STR1$Std)
library(devtools)
setwd("Bachelor/Biotech")
document()
document()
check()
load_all()
document()
